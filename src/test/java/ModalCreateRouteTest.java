import io.qameta.allure.Feature;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static io.qameta.allure.Allure.step;
import static io.qameta.allure.SeverityLevel.NORMAL;

@Owner("zannatovn")
@Severity(NORMAL)
@Feature("Маршруты")
public class ModalCreateRouteTest {

        @Test
        @DisplayName("Проверка поля поиска по городам/ПВЗ")
        public void checkSearchInputTest() {
            step("Поиск осуществляется по названию города", () -> {});
            step("Поиск осуществляется по ПВЗ", () -> {});
        }

        @Test
        @DisplayName("Проверка отображения чек-боксов городов")
        public void checkCheckboxCityTest() {
            step("Чек-бокс невыбранного города белый и активный", () -> {});
            step("Чек-бокс города, ПВЗ которого выбраны частично, красный с белой горизонтальной полоской", () -> {});
            step("Чек-бокс города, все ПВЗ которого выбраны не все, красный с белой горизонтальной полоской", () -> {});
        }

        @Test
        @DisplayName("Проверка чек-боксов ПВЗ")
        public void checkCheckboxPVZTest() {
            step("При нажатии на чек-бокс с белой полоской происходит 'довыбор' всех не выбранных ПВЗ "
                    + "со всеми типами доставки", () -> {});
            step("При нажатии на чек-бокс с белой галочкой происходит отмена выбора всех ПВЗ "
                    + "со всеми типами доставки", () -> {});
            step("При нажатии на полностью белый чек-бокс происходит выбор всех ПВЗ города со всеми типами доставки", () -> {});
            step("При нажатии на неактивный чек-бокс города или ПВЗ ничего не происходит", () -> {});
            step("В блоке с ПВЗ для уже привязанных к маршрутам ПВЗ в чек-боксах выводятся цифры - номера маршрутов, "
                    + "к которым они привязаны", () -> {});
        }

        @Test
        @DisplayName("Проверка чек-боксов 'Стены упаковки'")
        public void checkCheckboxPackingWallsTest() {
            step("При нажатии на активный чек-бокс стены упаковки, чек-бокс становится красного цвета с белой галочкой внутри", () -> {});
            step("При нажатии на неактивный чек-бокс стены упаковки, ничего не происходит", () -> {});
        }

        @Test
        @DisplayName("Проверка кнопок модального окна")
        public void checkModalElementsTest() {
            step("При нажатии на знак вопроса в блоке с ПВЗ появляется текстовая подсказка", () -> {});
            step("При нажатии на область вне модалки или на крестик появляется предупреждение о том, "
                    + "что изменения не будут сохранены", () -> {});
            step("Если в модалке нажать 'Да', изменения не сохранятся. Если 'Нет' - модалка останется открытой", () -> {});
            step("Кнопка 'Сохранить' сохраняет все примененные изменения", () -> {});
        }
}